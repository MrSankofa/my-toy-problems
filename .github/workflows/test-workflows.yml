name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build and test with Maven
        run: mvn -B verify

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-report
          path: target/site/jacoco/
          if-no-files-found: warn

      - name: Post Test Summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚ú® **Build Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Total Tests**: $(find target/surefire-reports -name 'TEST-*.xml' | xargs grep -h "<testcase" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå **Failed Tests**: $(find target/surefire-reports -name 'TEST-*.xml' | xargs grep -h "<failure" | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: Generate Detailed Test Summary
        run: |
            echo "## Detailed Test Results" >> $GITHUB_STEP_SUMMARY
            for test_file in $(find target/surefire-reports -name 'TEST-*.xml'); do
              echo "### $(basename $test_file)" >> $GITHUB_STEP_SUMMARY
              tests=$(xmllint --xpath 'string(count(//testcase))' $test_file)
              failures=$(xmllint --xpath 'string(count(//testcase[failure]))' $test_file)
              echo "Total: $tests, Failures: $failures" >> $GITHUB_STEP_SUMMARY
              xmllint --format $test_file | grep -oP '(?<=<testcase ).*?(?=</testcase>)' | while read testcase; do
                classname=$(echo $testcase | grep -oP '(?<=classname=").*?(?=")')
                name=$(echo $testcase | grep -oP '(?<=name=").*?(?=")')
                failure=$(echo $testcase | grep -oP '(?<=<failure ).*?(?=</failure>)' || echo "None")
                echo "- **$classname.$name**: $(if [ "$failure" != "None" ]; then echo "‚ùå Failed - $failure"; else echo "‚úÖ Passed"; fi)" >> $GITHUB_STEP_SUMMARY
              done
            done